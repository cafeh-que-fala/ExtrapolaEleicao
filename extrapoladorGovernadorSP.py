import requests
import time
import threading
municipios_SP = ['61018', '61034', '61050', '61131', '61581', '61158', '61174', '61190', '61212', '61220', '61298', '61310', '61379', '61336', '61352', '61395', '61417', '61433', '61450', '61476', '61492', '61514', '61530', 
'61590', '61611', '61646', '61638', '61654', '61263', '61557', '61573', '62065', '61670', '61697', '61719', '61735', '61751', '61778', '61522', '61794', '61816', '61832', '61875', '61891', '61859', '61913', '61930', '61972', '61999', '62030', '62057', '61360', '62073', '62090', '62111', '62138', '62014', '62154', '62170', '62197', '62219', '62235', '62251', '61280', '62278', '62294', '62316', '62332', '62359', '62375', '62391', '62413', '61786', '62456', '62472', '61026', '62430', '62499', '62510', '62553', '62081', '62570', '62596', '62618', '62634', '62650', '61956', '62693', '62677', '62731', '62758', '62774', '62790', '62812', '62839', '62855', '61484', '62871', '62898', '61506', '62910', '62936', '62952', '62979', '62995', '62103', '61344', '63070', '63096', '63053', '63118', '63134', '63150', '63177', '63215', '63231', '63258', '62715', '63274', '63290', '63312', '63339', '63355', '63371', '63398', '63410', '63436', '63452', '63479', '63495', '63517', '63533', '63550', '63592', '63576', '63614', '63630', '63657', '63690', '63673', '63711', '63738', '63193', '63010', '63037', '63754', '63770', '61123', '63797', '63819', '63835', '63851', '63878', '63894', '63916', '63932', '63959', '63975', '63991', '61760', '61182', '64017', '64033', '61387', '61689', '68659', '61140', '61662', '64050', '64076', '61000', '64092', '64130', '64114', '62286', '64157', '64173', '64190', '64238', '64211', '64254', '64270', '64297', '64319', '64351', '64378', '62308', '64394', '64416', '64432', '64475', '64459', '64530', '64513', '64599', '64610', '64637', '64653', '64670', '64696', '64572', '64718', '64734', '64750', '64777', '64556', '61107', '64491', '64793', '64335', '64815', '61743', '61727', '64831', '64858', '61085', '64874', '64912', '64890', '64939', '64955', '64971', '64998', '65030', '65056', '65013', '65072', '62006', '61204', '65099', '65110', 
'65137', '65153', '65170', '65196', '65218', '65234', '62243', '65250', '65277', '65293', '65331', '65315', '65358', '65390', '65412', '65439', '61603', '65455', '65471', '65498', '65510', '65536', '61948', '65579', '65617', '65595', '65633', '65650', '65676', '65692', '65714', '65374', '65730', '65757', '65773', '65790', '65811', '65838', '65552', '65854', '65870', '65897', '65919', '65935', '65951', '65978', '65994', '66010', '66036', '66052', '66079', '66095', '66117', '66150', '66133', '62324', '66192', '66214', '66257', '66230', '66176', '66273', '66290', '66338', '66311', '66354', '66370', '66397', '66419', '66435', '66451', '62022', '66478', '66516', '66494', '66559', '66575', '66591', '66532', '66613', '66630', '66656', '66672', '66699', '66710', '66737', '66753', '66770', '61867', '66834', '66796', '66850', '66818', '66877', '66893', '66915', '66931', '61964', '66958', '66974', '67016', '66990', '67032', '67059', '67075', '67091', '67113', '67130', '67156', '67172', '67199', '67237', '67253', '67270', '67296', '67318', '67334', '67377', '67350', '67210', '67393', '67415', '61069', '67431', '62340', '67458', '67474', '67490', '67512', '67539', '67555', '67571', '61980', '61425', '62367', '67598', '67610', '67636', '67652', '67679', '67695', '61409', '67717', '67733', '67750', '67792', '67814', '67830', '67857', '67873', '67890', '67911', '67938', '67954', '67970', '62383', '67997', '68012', '68039', '68055', '68071', '68098', '68110', '68136', '68179', '68195', '68217', '68152', '68233', '68250', '61824', '68276', '68292', '62405', '68330', '68314', '68357', '68373', '68390', '68411', '68438', '61247', '68454', '68470', '68497', '68519', '68535', '68551', '68578', '68594', '68616', '68632', '68675', '68691', '68713', '68730', '68756', '68772', '68799', '68810', '68837', '68853', '68870', '68896', '68918', '68934', '68950', '68993', 
'69019', '69035', '69051', '61808', '69078', '69094', '69116', '69132', '69159', '61565', '69175', '68977', '62120', '69191', '69213', '62146', '69230', '69256', '69272', '69299', '69310', '69337', '62162', '69353', '69370', '69396', '69418', '69434', '69450', '69477', '69493', '69515', '69531', '69558', '69574', '69590', '69612', '69639', '69655', '62421', '61700', '69671', '69698', '69736', '69752', '69779', '69795', '69817', '69833', '69850', '69710', '61166', '69876', '69914', '69892', '69930', '69957', '69973', '69990', '70017', '70033', '61441', '70050', '70076', '70092', '70114', '70130', '70157', '70211', '70173', '70238', '70254', '62189', '70270', '70297', '70319', '70335', '70351', '70378', '70394', '70416', '70432', '70491', '70513', '70530', '62200', '70459', '70475', '70556', '70572', '70599', '70610', '61328', '70637', '70653', '70670', '70718', '70696', '71234', '71250', '71277', '71293', '71331', '71315', '71358', '71374', '71390', '71412', '71439', '71455', '71471', '71498', '71510', '61301', '70734', '70750', '70777', '70793', '70815', '70890', '70912', '70939', '70955', '70971', '70998', '70831', '70858', '61883', '70874', '61905', '71013', '71030', '71056', '71072', '71099', '71110', '71137', '71153', '71170', '71196', '71218', '71536', '71552', '71579', '71595', '71617', '71633', '71650', '71676', '71692', '71730', '71714', '62260', '71757', '71773', '61840', '71790', '61042', '71811', '71838', '71854', '71870', '71897', '71919', '71935', '62049', '71951', '62448', '71978', '71994', '61620', '72036', '72010', '72052', '72079', '61468', '72095', '72117', '72133', '72150', '72192', '72214', '72176', '72230', '72257', '72273', '61549', '72311', '72737', '72354', '72370', '72397', '72419', '62227', '72435', '72451', '72338', '61921', '61077', '61093', '70190', '61115', '61239', '61255', '61271', '67776']
votos_atuais       =  {'10':0,'13':0}
votos_extrapolados =  {'10':0,'13':0}

def get_data(municipio,votos_atuais,votos_extrapolados): 
    try: # Obtem dados do segundo turno
        bool_valoresAtuais = True
        response = requests.get(f"https://resultados.tse.jus.br/oficial/ele2022/547/dados/sp/sp{municipio}-c0003-e000547-v.json").json()
        pct_urnas_apuradas_uf = float(response['abr'][0]['pst'].replace(',','.'))/100
        if pct_urnas_apuradas_uf == 0:
            raise ZeroDivisionError()
    except: # Caso não consiga obter OU essa UF não tenha nenhum voto no segundo turno até o momento, pegue os dados do 1o turno
        bool_valoresAtuais = False
        response = requests.get(f"https://resultados.tse.jus.br/oficial/ele2022/546/dados/sp/sp{municipio}-c0003-e000546-v.json").json()
        pct_urnas_apuradas_uf = float(response['abr'][0]['pst'].replace(',','.'))/100
    
    votos_uf = {'10':0,'13':0}
    for dicionario_votos in response['abr'][0]['cand']:
        n = dicionario_votos['n']
        if n in ['10','13']:
            votos_uf[n] = int(dicionario_votos['vap'])
            if bool_valoresAtuais:
                votos_atuais[n]       += votos_uf[n]
            votos_extrapolados[n] += votos_uf[n]/pct_urnas_apuradas_uf


threads = [threading.Thread(target=get_data, args=(municipio,votos_atuais,votos_extrapolados)) for municipio in municipios_SP] 
t0 = time.time()
for thread in threads:
    thread.start()
for thread in threads:
    thread.join()
t1 = time.time()

print("-------votos atuais---------")
print(f'Haddad: {votos_atuais["13"]}')
print(f'Tarcisio: {votos_atuais["10"]}')
print()
print("-------votos extrapolados---------")
print(f'Haddad: {votos_extrapolados["13"]}')
print(f'Tarcisio: {votos_extrapolados["10"]}')
print()
print(f"tempo gasto: {t1-t0}s")


#Gov : 
#Gov : https://resultados.tse.jus.br/oficial/ele2022/546/dados/sp/sp64033-c0003-e000546-v.json

